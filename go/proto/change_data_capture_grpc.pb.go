// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/change_data_capture.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CDCService_CDCStream_FullMethodName = "/litetable.cdc.v1.CDCService/CDCStream"
)

// CDCServiceClient is the client API for CDCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CDCServiceClient interface {
	CDCStream(ctx context.Context, in *CDCSubscriptionRequest, opts ...grpc.CallOption) (CDCService_CDCStreamClient, error)
}

type cDCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCDCServiceClient(cc grpc.ClientConnInterface) CDCServiceClient {
	return &cDCServiceClient{cc}
}

func (c *cDCServiceClient) CDCStream(ctx context.Context, in *CDCSubscriptionRequest, opts ...grpc.CallOption) (CDCService_CDCStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CDCService_ServiceDesc.Streams[0], CDCService_CDCStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cDCServiceCDCStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CDCService_CDCStreamClient interface {
	Recv() (*CDCEvent, error)
	grpc.ClientStream
}

type cDCServiceCDCStreamClient struct {
	grpc.ClientStream
}

func (x *cDCServiceCDCStreamClient) Recv() (*CDCEvent, error) {
	m := new(CDCEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CDCServiceServer is the server API for CDCService service.
// All implementations must embed UnimplementedCDCServiceServer
// for forward compatibility
type CDCServiceServer interface {
	CDCStream(*CDCSubscriptionRequest, CDCService_CDCStreamServer) error
	mustEmbedUnimplementedCDCServiceServer()
}

// UnimplementedCDCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCDCServiceServer struct {
}

func (UnimplementedCDCServiceServer) CDCStream(*CDCSubscriptionRequest, CDCService_CDCStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CDCStream not implemented")
}
func (UnimplementedCDCServiceServer) mustEmbedUnimplementedCDCServiceServer() {}

// UnsafeCDCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDCServiceServer will
// result in compilation errors.
type UnsafeCDCServiceServer interface {
	mustEmbedUnimplementedCDCServiceServer()
}

func RegisterCDCServiceServer(s grpc.ServiceRegistrar, srv CDCServiceServer) {
	s.RegisterService(&CDCService_ServiceDesc, srv)
}

func _CDCService_CDCStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CDCSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CDCServiceServer).CDCStream(m, &cDCServiceCDCStreamServer{stream})
}

type CDCService_CDCStreamServer interface {
	Send(*CDCEvent) error
	grpc.ServerStream
}

type cDCServiceCDCStreamServer struct {
	grpc.ServerStream
}

func (x *cDCServiceCDCStreamServer) Send(m *CDCEvent) error {
	return x.ServerStream.SendMsg(m)
}

// CDCService_ServiceDesc is the grpc.ServiceDesc for CDCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "litetable.cdc.v1.CDCService",
	HandlerType: (*CDCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CDCStream",
			Handler:       _CDCService_CDCStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/change_data_capture.proto",
}
